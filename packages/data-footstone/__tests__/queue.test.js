import { BaseQueue, Queue, PriorityQueue } from '../src/queue'

describe('BaseQueue', () => {
  test('BaseQueue', () => {
    let q = new BaseQueue(3)
    expect(Number.isFinite(q.capacity)).toBeTruthy()
    q = new BaseQueue()
    expect(Number.isFinite(q.capacity)).toBeFalsy()
  })
})
describe('Queue', () => {
  it('Queue', () => {
    let queue = new Queue()
    queue.enqueue(1)
    queue.enqueue(2)
    queue.enqueue(3)
    queue.enqueue(4)
    expect(queue.dequeue()).toBe(1)
    expect(queue.dequeue()).toBe(2)
    expect(queue.toArray()).toEqual([3, 4])
    expect(queue.getHead()).toBe(3)
    expect(queue.getTail()).toBe(4)
    expect(queue.size()).toBe(2)
    expect(queue.isEmpty()).toBeFalsy()
    expect(queue.isFull()).toBeFalsy()
    queue.clear()
    expect(queue.toArray()).toEqual([])
    expect(queue.isEmpty()).toBeTruthy()
  })
  test('queue', () => {
    let queue = new Queue(3)
    queue.enqueue(1)
    queue.enqueue(1)
    queue.enqueue(1)
    expect(queue.toArray()).toEqual([1,1,1])
    expect(queue.capacity).toBe(3)
    expect(queue.enqueue(2)).toEqual(new Error('has full'))
  })
})

describe.only('PriorityQueue', () => {
  it('PriorityQueue', () => {
    let queue = new PriorityQueue(undefined, 3)
    expect(queue.highestPriority()).toBeUndefined()
    expect(queue.lowestPriority()).toBeUndefined()
    expect(queue.enqueue(1)).toBe(1)
    expect(queue.enqueue(2)).toBe(2)
    expect(queue.toArray()).toEqual([1, 2])
    expect(queue.enqueue(3, 4)).toBe(3)
    expect(queue.toArray()).toEqual([3, 1, 2])
    expect(queue.enqueue(4, 3, false)).toBe(4)
    expect(queue.toArray()).toEqual([3, 4, 1, 2])
    expect(queue.items.map((item) => item.position)).toEqual([0, 1, 2, 3])
    expect(queue.items.map((item) => item.priority)).toEqual([4, 3, 3, 3])
    expect(queue.updatePriorityAt(1, -2)).toBeTruthy()
    expect(queue.toArray()).toEqual([3, 1, 2, 4])
    expect(queue.items.map((item) => item.priority)).toEqual([4, 3, 3, 1])
    expect(queue.items.map((item) => item.position)).toEqual([0, 1, 2, 3])
    expect(queue.dequeue()).toBe(3)
    expect(queue.dequeue()).toBe(1)
    expect(queue.getHead()).toBe(2)
    expect(queue.getTail()).toBe(4)
    expect(queue.size()).toBe(2)
    expect(queue.isEmpty()).toBeFalsy()
    expect(queue.enqueue(4, 4)).toBe(3)
    queue.clear()
    expect(queue.size()).toBe(0)
    expect(queue.isEmpty()).toBeTruthy()
    expect(queue.toArray()).toEqual([])
  })
  test('PriorityQueue capacity', () => {
    let queue = new PriorityQueue(3)
    queue.enqueue(1)
    queue.enqueue(2)
    queue.enqueue(3)
    expect(queue.enqueue(4)).toEqual(new Error('has full'))
  })
})
